@startuml converter

enum NumericType {
    Boolean
    Byte
    Short
    Int
    Long
    Float
    Double
}

class Numeric {
    - value: U64
    - type: NumericType

    + **static** FromBoolean(value: bool): Numeric
    + **static** FromByte(value: uint8): Numeric
    + **static** FromShort(value: uint16): Numeric
    + **static** FromInt(value: int32): Numeric
    + **static** FromLong(value: int64): Numeric
    + **static** FromFloat(value: float32): Numeric
    + **static** FromDouble(value: float64): Numeric
    + ToBoolean(): bool
    + ToByte(): uint8
    + ToShort(): uint16
    + ToInt(): int32
    + ToLong(): int64
    + ToFloat(): float32
    + ToDouble(): float64
    + GetType(): NumericType
}

Numeric *-- NumericType : has


interface ConverterBase {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value
}


/' 
 ' ==== Converter for null and undefind ====
 '/

class NullTypeConverter implements ConverterBase {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value
}

class UndefinedConverter implements ConverterBase {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value
}

class PrimitiveConverter implements ConverterBase {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value
}

/' 
 ' ==== Converter for numeric types ====
 '/
class NumericConverter extends PrimitiveConverter {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value

    + **virtual** ConvertToStatic(jsValue: napi_value): Numeric
    + **virtual** ConvertToDynamic(numeric: Numeric): napi_value
}

note right of NumericConverter
  后两个方法是虚方法, 需要在子类中实现. 子类会检查传入Numeric是否是自己的类型
end note


NumericConverter ..> Numeric : uses
NumericConverter ..> NumericType : uses

class BooleanConverter extends NumericConverter {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value

    + ConvertToStatic(jsValue: napi_value): Numeric
    + ConvertToDynamic(numeric: Numeric): napi_value
}

class ByteConverter extends NumericConverter {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value

    + ConvertToStatic(jsValue: napi_value): Numeric
    + ConvertToDynamic(numeric: Numeric): napi_value
}

class ShortConverter extends NumericConverter {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value

    + ConvertToStatic(jsValue: napi_value): Numeric
    + ConvertToDynamic(numeric: Numeric): napi_value
}

class LongConverter extends NumericConverter {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value

    + ConvertToStatic(jsValue: napi_value): Numeric
    + ConvertToDynamic(numeric: Numeric): napi_value
}

class FloatConverter extends NumericConverter {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value

    + ConvertToStatic(jsValue: napi_value): Numeric
    + ConvertToDynamic(numeric: Numeric): napi_value
}

class DoubleConverter extends NumericConverter {
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value

    + ConvertToStatic(jsValue: napi_value): Numeric
    + ConvertToDynamic(numeric: Numeric): napi_value
}

class StringConverter extends PrimitiveConverter {
    + ConvertToStatic(napi_value jsValue): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value
}

/' 
 ' ==== Converter for reference ====
 '/
class ReferenceConverter implements ConverterBase {
    - DynamicProxier: DynamicClassProxierBase *
    - StaticProxier: StaticClassProxierBase *
    + ConvertToStatic(jsValue: napi_value): EtsObject *
    + ConvertToDynamic(etsObject: EtsObject *): napi_value
    + GetDynamicClassProxier(): DynamicProxier *
    + GetStaticClassProxier(): StaticProxier *
}

interface DynamicClassProxierBase {
    + GetProxiedDynamicClassCtor(): napi_value
    + GetProxyClass(): EtsClass *
    + CreateDynamicProxyInstance(etsObject: EtsObject *): napi_value
}

interface StaticClassProxierBase {
    + GetProxiedStaticClass(): EtsClass *
    + GetProxyClassCtor(): napi_value
    + CreateStaticProxyInstance(jsValue: napi_value): EtsObject *
}

ReferenceConverter ..> DynamicClassProxierBase : uses
ReferenceConverter ..> StaticClassProxierBase : uses

class ReflectDynamicClassProxier extends DynamicClassProxierBase {
    - ProxiedDynamicClassCtor: napi_value
    - ProxyClass: EtsClass *
    + GetProxiedDynamicClassCtor(): napi_value
    + GetProxyClass(): EtsClass *
    + CreateDynamicProxyInstance(etsObject: EtsObject *): napi_value
}

class ReflectStaticClassProxier extends StaticClassProxierBase {
    - ProxiedStaticClass: EtsClass *
    - ProxyClassCtor: napi_value
    + GetProxiedStaticClass(): EtsClass *
    + GetProxyClassCtor(): napi_value
    + CreateStaticProxyInstance(jsValue: napi_value): EtsObject *
}




@enduml